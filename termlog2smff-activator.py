#!/usr/bin/env python
# Convert termlog adif to SMFF according to:
# https://smff.sk6ei.se/adif.txt
#
# In termlog, use STX and RTX for SMFF area info:
# STX field <stx_string> is your sent SMFF number e.g: 3509
# RTX field <rtx_string> is received SMFF number e.g: 3509
#
# Example:
# 1SAQRZ is not in an SMFF area, but makes a QSO with 1SLQRV who is in
# SMFF-3509. STX should be empty and 1SAQRZ fills in RTX with 3509 in his/her
# log. termlog2smff will use <stx_string> as <MY_CITY> and <rtx_string> as
# <QTH>.
#
# 73 DE SA6MWA
# based on ADIF.PY by OK4BX http://web.bxhome.org
import sys, getopt, os
import re
import datetime
import time
import glob
ADIF_REC_RE = re.compile(r'<(.*?):(\d+).*?>([^<\t\f\v]+)')

def parse(fn):
  raw = re.split('<eor>|<eoh>(?i)', open(fn).read() )
  logbook =[]
  for record in raw[1:-1]:
    qso = {}
    tags = ADIF_REC_RE.findall(record)
    for tag in tags:
      qso[tag[0].lower()] = tag[2][:int(tag[1])]
    logbook.append(qso)    
  return logbook

def sortlogbook(data):
  for i in range(len(data)):
    # convert all entries into lower case and ensure qso_date and time_on exists
    data[i] = {k.lower(): v for k, v in data[i].items()}
    if 'qso_date' not in data[i]:
      data[i]['qso_date'] = ""
    if 'time_on' not in data[i]:
      data[i]['time_on'] = ""
  return sorted(data, key = lambda x: x['qso_date'] + x['time_on'])

def savesmff(operator, fn, data):
  required_keys = [
    "call", "qso_date", "time_on",
    "rst_sent", "rst_rcvd", "mode",
    "band", "stx_string" ]
  smff_keys = [
    "operator",
    "call",
    "qso_date",
    "time_on",
    "rst_sent",
    "rst_rcvd",
    "mode",
    "band",
    "my_city",
    "qth",
    "notes" ]
  fh=open(fn,'w')
  fh.write('Log: %s\nGenerated by SA6MWA termlog2smff-activator.py\nhttps://github.com/sa6mwa\nbased on ADIF.PY by OK4BX\nhttp://web.bxhome.org\n<EOH>\n\n' % fn)
  for qso in sortlogbook(data):
    # sortlogbook() returns all keys in lower case
    for k in required_keys:
      if k not in qso:
        print "error: %s key is not in the following qso:\n%s" % (k, qso)
        sys.exit(1)
    qso["my_city"] = qso.pop("stx_string", "")
    qso["qth"] = qso.pop("srx_string", "")
    if "operator" not in qso:
      qso["operator"] = operator.upper()
    else:
      qso["operator"] = qso["operator"].upper()
    for key in smff_keys:
      if key not in qso:
        # 1st for loop above has already confirmed that the required keys are
        # in the qso
        qso[key] = ""
      value = qso[key]
      fh.write("<%s:%i>%s\n" % (key.upper(), len(value), value))
    fh.write("<EOR>\n\n")
  fh.close()

#def conv_datetime(adi_date, adi_time):
#    return datetime.datetime.strptime(adi_date+adi_time.ljust(6,"0"), "%Y%m%d%H%M%S")

def usage():
  print "usage: %s -o output-smff-log.adi [-c operator] [-s smffcode] sourcelog1.adif [sourcelog2.adif]" % sys.argv[0]

def main():
  try:
    opts, adifs = getopt.getopt(sys.argv[1:], "ho:c:s:", ["help", "output=", "operator=", "smff-area="])
  except getopt.GetoptError as err:
    print str(err)
    usage()
    sys.exit(2)
  destinationlog = None
  operator = None
  smffarea = None
  for o, a in opts:
    if o in ("-h", "--help"):
      usage()
      sys.exit()
    elif o in ("-o", "--output"):
      destinationlog = a
    elif o in ("-c", "--operator"):
      operator = a.upper()
    elif o in ("-s", "--smff-area"):
      smffarea = a.upper()
    else:
      assert False, "unhandled option"
  if destinationlog is None or len(adifs) < 1:
    usage()
    sys.exit(2)
  logbook = list()
  if os.path.exists(destinationlog):
    print "error: %s already exists, please choose another file name or move file!" % destinationlog
    sys.exit(1)
  for f in adifs:
    flogbook = parse(f)
    for qso in flogbook:
      qso = { k.lower(): v for k, v in qso.items() }
      if not operator and "operator" not in qso:
        print "error: -c or --operator not set and operator key is missing in qso:\n%s" % qso
        sys.exit(1)
      if not smffarea and "stx_string" not in qso:
        print "error: -s or --smff-area not set and stx_string key is missing in qso:\n%s" % qso
        sys.exit(1)
      if "stx_string" not in qso and smffarea:
        qso["stx_string"] = smffarea.upper()
      logbook.append(qso)
  if len(logbook) > 0:
    savesmff(operator, destinationlog, logbook)
    print "Saved " + destinationlog
  else:
    print "Will not create empty log %s." % destinationlog
if __name__ == '__main__':
  main()
