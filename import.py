#!/usr/bin/env python
# Import/update one or more ADIF logs into a single log.
# DE SA6MWA
# based on ADIF.PY by OK4BX http://web.bxhome.org
import sys, getopt, os
import re
import datetime
import time
import glob
ADIF_REC_RE = re.compile(r'<(.*?):(\d+).*?>([^<\t\f\v]+)')

def parse(fn):
  raw = re.split('<eor>|<eoh>(?i)', open(fn).read() )
  logbook =[]
  for record in raw[1:-1]:
    qso = {}
    tags = ADIF_REC_RE.findall(record)
    for tag in tags:
      qso[tag[0].lower()] = tag[2][:int(tag[1])]
    logbook.append(qso)    
  return logbook

def sortlogbook(data):
  for i in range(len(data)):
    # convert all entries into lower case and ensure qso_date and time_on exists
    data[i] = {k.lower(): v for k, v in data[i].items()}
    if 'qso_date' not in data[i]:
      data[i]['qso_date'] = ""
    if 'time_on' not in data[i]:
      data[i]['time_on'] = ""
  return sorted(data, key = lambda x: x['qso_date'] + x['time_on'])

def save(operator, fn, data):
  fh=open(fn,'w')
  fh.write('Log: %s\nGenerated by SA6MWA import.py based on\nADIF.PY by OK4BX\nhttp://web.bxhome.org\n<EOH>\n' % fn)
  for qso in sortlogbook(data):
    if "operator" not in qso and operator:
      qso["operator"] = operator.upper()
    for key in sorted(qso):
      value = qso[key]
      fh.write('<%s:%i>%s ' % (key.upper(), len(value), value))
    fh.write('<EOR>\n')
  fh.close()

#def conv_datetime(adi_date, adi_time):
#    return datetime.datetime.strptime(adi_date+adi_time.ljust(6,"0"), "%Y%m%d%H%M%S")

def compareQSO(qso1, qso2):
  match_keys = [ "call", "qso_date", "time_on", "mode", "band" ]
  qso1 = { k.lower(): v for k, v in qso1.items() }
  qso2 = { k.lower(): v for k, v in qso2.items() }
  match = True
  for k in match_keys:
    for qso in [ qso1, qso2 ]:
      if k not in qso:
        print "error: required key %s not in qso:\n%s" % (k, qso)
        sys.exit(1)
    if qso1[k] != qso2[k]:
      match = False
  return match

def qso_not_in_logbook(qso, logbook):
  # returns True if qso is not in logbook
  retval = True
  for lbqso in logbook:
    if compareQSO(qso, lbqso):
      retval = False
  return retval

def usage():
  print "usage: %s -a destinationlog.adif [-c operator] sourcelog1.adif [sourcelog2.adif...]" % sys.argv[0]

def main():
  try:
    opts, adifs = getopt.getopt(sys.argv[1:], "ha:c:", ["help","logfile=","operator="])
  except getopt.GetoptError as err:
    print str(err)
    usage()
    sys.exit(2)
  destinationlog = None
  operator = None
  for o, a in opts:
    if o in ("-h", "--help"):
      usage()
      sys.exit()
    elif o in ("-a", "--logfile"):
      destinationlog = a
    elif o in ("-c", "--operator"):
      operator = a.upper()
    else:
      assert False, "unhandled option"
  if not destinationlog or len(adifs) < 1:
    usage()
    sys.exit(2)
  logbook = list()
  if os.path.exists(destinationlog):
    if not os.path.isfile(destinationlog):
      print "error: %s is not a file!" % destinationlog
      sys.exit(1)
    logbook = parse(destinationlog)
  logbook_original_length = len(logbook)
  for f in adifs:
    flogbook = parse(f)
    for qso in flogbook:
      if qso_not_in_logbook(qso, logbook):
        logbook.append(qso)
  if len(logbook) > 0 and len(logbook) > logbook_original_length:
    save(operator, destinationlog, logbook)
    print "Saved " + destinationlog
  else:
    print "Nothing to add to %s." % destinationlog
if __name__ == '__main__':
  main()
