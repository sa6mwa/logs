#!/usr/bin/env python
# Add/replace one or more of the following fields:
#   OPERATOR
#   STATION_CALLSIGN
#   TX_PWR
# DE SA6MWA https://github.com/sa6mwa/sa6mwa-logs
# based on ADIF.PY by OK4BX http://web.bxhome.org
import sys, getopt, os
import re
import datetime
import time
import glob
ADIF_REC_RE = re.compile(r'<(.*?):(\d+).*?>([^<\t\f\v]+)')

def parse(fn):
  raw = re.split('<eor>|<eoh>(?i)', open(fn).read() )
  logbook =[]
  for record in raw[1:-1]:
    qso = {}
    tags = ADIF_REC_RE.findall(record)
    for tag in tags:
      qso[tag[0].lower()] = tag[2][:int(tag[1])]
    logbook.append(qso)    
  return logbook

def sortlogbook(data):
  for i in range(len(data)):
    # convert all entries into lower case and ensure qso_date and time_on exists
    data[i] = {k.lower(): v for k, v in data[i].items()}
    if 'qso_date' not in data[i]:
      data[i]['qso_date'] = ""
    if 'time_on' not in data[i]:
      data[i]['time_on'] = ""
  return sorted(data, key = lambda x: x['qso_date'] + x['time_on'])

def save(fn, data):
  header = "Log: {}\nGenerated by SA6MWA add_fields.py\nhttps://github.com/sa6mwa/sa6mwa-logs\nbased on ADIF.PY by OK4BX\nhttp://web.bxhome.org\n<EOH>\n".format(fn)
  if os.path.exists(fn):
    split = re.split('<eoh>(?i)', open(fn).read())
    if len(split) > 1:
      header = split[0] + '<EOH>\n'
  fh=open(fn,'w')
  fh.write(header)
  for qso in sortlogbook(data):
    for key in sorted(qso):
      value = qso[key]
      fh.write('<%s:%i>%s ' % (key.upper(), len(value), value))
    fh.write('<EOR>\n')
  fh.close()

def usage():
  print "usage: %s [-c operator] [-s station_callsign] [-p tx_pwr] logfile1.adif [logfile2.adif...]" % sys.argv[0]

def main():
  try:
    opts, adifs = getopt.getopt(sys.argv[1:], "hc:s:p:", ["help","operator=","station=","power="])
  except getopt.GetoptError as err:
    print str(err)
    usage()
    sys.exit(2)
  operator = None
  station = None
  txpwr = None
  for o, a in opts:
    if o in ("-h", "--help"):
      usage()
      sys.exit()
    elif o in ("-c", "--operator"):
      operator = a.upper()
    elif o in ("-s", "--station"):
      station = a.upper()
    elif o in ("-p", "--power"):
      txpwr = a
    else:
      assert False, "unhandled option"
  if (not operator and not station and not txpwr) or len(adifs) < 1:
    usage()
    sys.exit(2)
  for f in adifs:
    logbook = parse(f)
    for qso in logbook:
      if operator:
        qso["operator"] = operator
      if station:
        qso["station_callsign"] = station
      if txpwr:
        qso["tx_pwr"] = txpwr
    save(f, logbook)
if __name__ == '__main__':
  main()
